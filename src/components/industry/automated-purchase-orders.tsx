"use client";

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  FileText, 
  CheckCircle, 
  Clock, 
  AlertTriangle, 
  DollarSign,
  Package,
  Truck,
  Settings,
  RefreshCw,
  Download,
  Eye,
  Edit,
  Trash2,
  Send,
  Archive,
  Filter,
  Search,
  Calendar,
  User,
  Building2
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Input } from '@/components/ui/input';

interface PurchaseOrder {
  id: string;
  poNumber: string;
  supplier: string;
  status: 'draft' | 'sent' | 'acknowledged' | 'confirmed' | 'shipped' | 'delivered' | 'cancelled';
  totalAmount: number;
  currency: string;
  orderDate: Date;
  expectedDelivery: Date;
  actualDelivery?: Date;
  items: {
    skuId: string;
    name: string;
    quantity: number;
    unitPrice: number;
    totalPrice: number;
  }[];
  priority: 'low' | 'medium' | 'high' | 'urgent';
  autoGenerated: boolean;
  approver: string;
  notes?: string;
}

export const AutomatedPurchaseOrders: React.FC = () => {
  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'draft' | 'sent' | 'acknowledged' | 'confirmed' | 'shipped' | 'delivered' | 'cancelled'>('all');
  const [selectedPO, setSelectedPO] = useState<PurchaseOrder | null>(null);

  useEffect(() => {
    loadPurchaseOrders();
  }, []);

  const loadPurchaseOrders = async () => {
    setIsLoading(true);
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const mockPOs: PurchaseOrder[] = [
      {
        id: 'po-1',
        poNumber: 'PO-2024-001',
        supplier: 'PharmaSupply Inc.',
        status: 'confirmed',
        totalAmount: 125000,
        currency: 'USD',
        orderDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
        expectedDelivery: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),
        items: [
          { skuId: 'SKU-001', name: 'Paracetamol 500mg', quantity: 1000, unitPrice: 2.50, totalPrice: 2500 },
          { skuId: 'SKU-002', name: 'Ibuprofen 400mg', quantity: 800, unitPrice: 3.20, totalPrice: 2560 },
          { skuId: 'SKU-003', name: 'Aspirin 100mg', quantity: 1200, unitPrice: 1.80, totalPrice: 2160 }
        ],
        priority: 'high',
        autoGenerated: true,
        approver: 'John Smith',
        notes: 'Auto-generated based on low stock alerts'
      },
      {
        id: 'po-2',
        poNumber: 'PO-2024-002',
        supplier: 'MediCorp Ltd.',
        status: 'shipped',
        totalAmount: 87500,
        currency: 'USD',
        orderDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),
        expectedDelivery: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),
        actualDelivery: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),
        items: [
          { skuId: 'SKU-004', name: 'Metformin 500mg', quantity: 500, unitPrice: 4.50, totalPrice: 2250 },
          { skuId: 'SKU-005', name: 'Insulin Vial', quantity: 200, unitPrice: 15.75, totalPrice: 3150 }
        ],
        priority: 'medium',
        autoGenerated: false,
        approver: 'Sarah Johnson'
      },
      {
        id: 'po-3',
        poNumber: 'PO-2024-003',
        supplier: 'HealthTech Solutions',
        status: 'draft',
        totalAmount: 45000,
        currency: 'USD',
        orderDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        expectedDelivery: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000),
        items: [
          { skuId: 'SKU-006', name: 'Vitamin D3', quantity: 2000, unitPrice: 1.25, totalPrice: 2500 },
          { skuId: 'SKU-007', name: 'Calcium Carbonate', quantity: 1500, unitPrice: 0.95, totalPrice: 1425 }
        ],
        priority: 'low',
        autoGenerated: true,
        approver: 'Mike Wilson'
      }
    ];
    
    setPurchaseOrders(mockPOs);
    setIsLoading(false);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'draft': return 'text-gray-600 bg-gray-100';
      case 'sent': return 'text-blue-600 bg-blue-100';
      case 'acknowledged': return 'text-yellow-600 bg-yellow-100';
      case 'confirmed': return 'text-green-600 bg-green-100';
      case 'shipped': return 'text-purple-600 bg-purple-100';
      case 'delivered': return 'text-green-700 bg-green-200';
      case 'cancelled': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'text-red-600 bg-red-100';
      case 'high': return 'text-orange-600 bg-orange-100';
      case 'medium': return 'text-yellow-600 bg-yellow-100';
      case 'low': return 'text-green-600 bg-green-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const filteredPOs = purchaseOrders.filter(po => {
    const matchesSearch = po.poNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         po.supplier.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterStatus === 'all' || po.status === filterStatus;
    return matchesSearch && matchesFilter;
  });

  const handleStatusUpdate = (poId: string, newStatus: string) => {
    setPurchaseOrders(prev => prev.map(po => 
      po.id === poId ? { ...po, status: newStatus as any } : po
    ));
  };

  const exportPOData = () => {
    const csvContent = [
      'PO Number,Supplier,Status,Total Amount,Currency,Order Date,Expected Delivery,Priority,Auto Generated,Approver',
      ...filteredPOs.map(po => [
        po.poNumber,
        po.supplier,
        po.status,
        po.totalAmount,
        po.currency,
        po.orderDate.toISOString().split('T')[0],
        po.expectedDelivery.toISOString().split('T')[0],
        po.priority,
        po.autoGenerated ? 'Yes' : 'No',
        po.approver
      ].join(','))
    ].join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'purchase_orders.csv';
    a.click();
    window.URL.revokeObjectURL(url);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <RefreshCw className="w-8 h-8 animate-spin text-blue-600" />
        <span className="ml-2 text-gray-600">Loading purchase orders...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Automated Purchase Orders</h2>
          <p className="text-gray-600">AI-powered purchase order generation and management</p>
        </div>
        <div className="flex space-x-2">
          <Button onClick={loadPurchaseOrders} disabled={isLoading} variant="outline" size="sm">
            <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
          <Button onClick={exportPOData} variant="outline" size="sm">
            <Download className="w-4 h-4 mr-2" />
            Export CSV
          </Button>
        </div>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-wrap gap-4">
            <div className="flex-1 min-w-64">
              <Input
                placeholder="Search PO numbers or suppliers..."
                value={searchTerm}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}
                className="w-full"
              />
            </div>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value as any)}
              className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Status</option>
              <option value="draft">Draft</option>
              <option value="sent">Sent</option>
              <option value="acknowledged">Acknowledged</option>
              <option value="confirmed">Confirmed</option>
              <option value="shipped">Shipped</option>
              <option value="delivered">Delivered</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>
        </CardContent>
      </Card>

      {/* Purchase Orders Table */}
      <Card>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PO Number</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Supplier</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Auto Generated</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredPOs.map((po, index) => (
                  <motion.tr
                    key={po.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className="hover:bg-gray-50"
                  >
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <FileText className="w-4 h-4 mr-2 text-blue-600" />
                        <span className="text-sm font-medium text-gray-900">{po.poNumber}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <Building2 className="w-4 h-4 mr-2 text-gray-400" />
                        <span className="text-sm text-gray-900">{po.supplier}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Badge className={getStatusColor(po.status)}>
                        {po.status.toUpperCase()}
                      </Badge>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {po.currency} {po.totalAmount.toLocaleString()}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Badge className={getPriorityColor(po.priority)}>
                        {po.priority.toUpperCase()}
                      </Badge>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        {po.autoGenerated ? (
                          <CheckCircle className="w-4 h-4 text-green-600" />
                        ) : (
                          <Clock className="w-4 h-4 text-gray-400" />
                        )}
                        <span className="ml-2 text-sm text-gray-900">
                          {po.autoGenerated ? 'Yes' : 'No'}
                        </span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setSelectedPO(po)}
                        >
                          <Eye className="w-4 h-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleStatusUpdate(po.id, 'sent')}
                        >
                          <Send className="w-4 h-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleStatusUpdate(po.id, 'cancelled')}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </td>
                  </motion.tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* PO Details Modal */}
      {selectedPO && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
          onClick={() => setSelectedPO(null)}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            className="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-96 overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Purchase Order Details</h3>
              <Button variant="outline" onClick={() => setSelectedPO(null)}>
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <label className="text-sm font-medium text-gray-500">PO Number</label>
                <p className="text-lg font-semibold">{selectedPO.poNumber}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-500">Supplier</label>
                <p className="text-lg">{selectedPO.supplier}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-500">Total Amount</label>
                <p className="text-lg font-semibold text-green-600">
                  {selectedPO.currency} {selectedPO.totalAmount.toLocaleString()}
                </p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-500">Status</label>
                <Badge className={getStatusColor(selectedPO.status)}>
                  {selectedPO.status.toUpperCase()}
                </Badge>
              </div>
            </div>

            <div className="mb-4">
              <h4 className="font-semibold mb-2">Items</h4>
              <div className="space-y-2">
                {selectedPO.items.map((item, idx) => (
                  <div key={idx} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                    <div>
                      <span className="font-medium">{item.name}</span>
                      <span className="text-sm text-gray-500 ml-2">({item.skuId})</span>
                    </div>
                    <div className="text-right">
                      <div>{item.quantity} × ${item.unitPrice}</div>
                      <div className="font-semibold">${item.totalPrice}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setSelectedPO(null)}>
                Close
              </Button>
              <Button onClick={() => handleStatusUpdate(selectedPO.id, 'sent')}>
                Send PO
              </Button>
            </div>
          </motion.div>
        </motion.div>
      )}

      {filteredPOs.length === 0 && (
        <Card>
          <CardContent className="p-8 text-center">
            <FileText className="w-12 h-12 mx-auto mb-4 text-gray-300" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">No purchase orders found</h3>
            <p className="text-gray-500">Try adjusting your search or filter criteria.</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
