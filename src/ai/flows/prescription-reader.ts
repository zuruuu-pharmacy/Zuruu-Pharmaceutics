
'use server';

/**
 * @fileOverview An AI-powered prescription reader.
 *
 * - readPrescription - A function that analyzes a prescription image.
 * - ReadPrescriptionInput - The input type for the readPrescription function.
 * - ReadPrescriptionOutput - The return type for the readPrescription function.
 */

import {z} from 'zod';
import OpenAI from 'openai';

const ReadPrescriptionInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a prescription, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'"
    ),
});
export type ReadPrescriptionInput = z.infer<typeof ReadPrescriptionInputSchema>;

const MedicationSchema = z.object({
    name: z.string().describe('The full name of the medication (generic name preferred).'),
    dosage: z.string().describe('The dosage and form of the medication (e.g., "500mg tablet", "250mg/5ml syrup").'),
    frequency: z.string().describe('How often to take the medication, standardized (e.g., "Twice daily", "At bedtime").'),
    route: z.string().describe('The route of administration (e.g., "Oral", "Topical", "IV").'),
    duration: z.string().describe('The duration of the therapy (e.g., "7 days", "2 weeks", "As needed").'),
    instructions: z.string().describe('Additional instructions for taking the medication (e.g., "With food", "For 7 days").'),
    status: z.enum(['confirmed', 'uncertain']).describe('Whether the recognition of this medication is certain or requires pharmacist review.'),
    generatedFields: z.array(z.enum(['dosage', 'frequency', 'duration', 'instructions', 'route'])).optional().describe('A list of fields that were auto-generated by the AI due to missing information on the prescription.')
});

const ReadPrescriptionOutputSchema = z.object({
    patient_id: z.string().optional().describe("The patient's ID, if found on the prescription."),
    prescription_date: z.string().optional().describe("The date the prescription was written, in YYYY-MM-DD format if possible."),
    diagnosis: z.string().optional().describe("The doctor's diagnosis from the prescription."),
    medications: z.array(MedicationSchema).describe('A list of medications prescribed.'),
    summary: z.string().describe('A general summary of the prescription and any important notes for the pharmacist or patient.'),
});
export type ReadPrescriptionOutput = z.infer<typeof ReadPrescriptionOutputSchema>;

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function readPrescription(input: ReadPrescriptionInput): Promise<ReadPrescriptionOutput> {
  try {
    console.log('Analyzing prescription with OpenAI API...');
    
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `You are an expert pharmacist and prescription analyst. Analyze this prescription image and extract all medication information, patient details, and diagnosis.

**EXTRACTION REQUIREMENTS:**
1. **Patient Information:** Patient ID, name, age, gender
2. **Prescription Details:** Date, doctor's name, diagnosis
3. **Medication Analysis:** For each medication, extract:
   - Name (generic preferred)
   - Dosage and form
   - Frequency (how often to take)
   - Route (oral, topical, IV, etc.)
   - Duration (7 days, 2 weeks, etc.)
   - Instructions (with food, at bedtime, etc.)
   - Status (confirmed/uncertain)

**COMMON ABBREVIATIONS:**
- BID = Twice daily, TID = Three times daily, QID = Four times daily
- PO = By mouth, IM = Intramuscular, IV = Intravenous
- stat = Immediately, PRN = As needed

**OUTPUT FORMAT:**
Return a JSON object with this exact structure:
{
  "patient_id": "Patient ID if found",
  "prescription_date": "YYYY-MM-DD format",
  "diagnosis": "Diagnosis if mentioned",
  "medications": [
    {
      "name": "Medication name",
      "dosage": "Dosage and form",
      "frequency": "How often to take",
      "route": "Route of administration",
      "duration": "Duration of therapy",
      "instructions": "Special instructions",
      "status": "confirmed or uncertain",
      "generatedFields": ["any auto-generated fields"]
    }
  ],
  "summary": "Comprehensive summary of the prescription"
}

IMPORTANT: Return valid JSON only. Extract as much information as possible, even from unclear handwriting.`
            },
            {
              type: "image_url",
              image_url: {
                url: input.photoDataUri
              }
            }
          ]
        }
      ],
      max_tokens: 1500,
      temperature: 0.1
    });

    const content = response.choices[0].message.content;
    console.log('OpenAI response received:', content?.substring(0, 200) + '...');
    
    if (!content) {
      throw new Error('No response from OpenAI');
    }

    // Try to extract JSON from the response
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('No JSON found in OpenAI response');
    }

    const result = JSON.parse(jsonMatch[0]);
    
    // Validate the result structure
    if (!result || typeof result !== 'object' || Object.keys(result).length === 0) {
      console.warn('OpenAI returned empty or invalid result, using fallback');
      return getFallbackPrescriptionAnalysis(input);
    }
    
    // Ensure required fields exist
    if (!result.medications || !Array.isArray(result.medications) || result.medications.length === 0) {
      console.warn('OpenAI result missing medications array, using fallback');
      return getFallbackPrescriptionAnalysis(input);
    }
    
    console.log('Prescription analysis completed successfully with OpenAI');
    return result;
    
  } catch (error) {
    console.error('OpenAI prescription analysis error:', error);
    return getFallbackPrescriptionAnalysis(input);
  }
}

// Fallback response generator for prescription analysis
function getFallbackPrescriptionAnalysis(input: ReadPrescriptionInput): ReadPrescriptionOutput {
  return {
    patient_id: "Unable to extract from image",
    prescription_date: new Date().toISOString().split('T')[0],
    diagnosis: "Unable to extract diagnosis from prescription image",
    medications: [
      {
        name: "Unable to extract medication name",
        dosage: "Unable to extract dosage",
        frequency: "Unable to extract frequency",
        route: "Unable to extract route",
        duration: "Unable to extract duration",
        instructions: "Unable to extract instructions",
        status: "uncertain" as const,
        generatedFields: ["dosage", "frequency", "route", "duration", "instructions"]
      }
    ],
    summary: "Prescription analysis was unable to extract clear information from the provided image. This may be due to:\n\n• Poor image quality or lighting\n• Unclear handwriting\n• Blurry or distorted text\n• Unsupported image format\n\nPlease ensure the prescription image is:\n• Clear and well-lit\n• Contains readable text\n• Shows the entire prescription\n• Is in a supported format (JPEG, PNG, etc.)\n\nFor handwritten prescriptions, ensure the handwriting is legible. If the issue persists, consider asking the prescribing doctor for a clearer copy or digital prescription."
  };
}
